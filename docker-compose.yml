version: '3.8'

services:
  # Development database
  db-dev:
    image: postgres:17.6-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - db_dev_data:/var/lib/postgresql/data
      - ./backend/database/init-dev.sql:/docker-entrypoint-initdb.d/init-dev.sql
    networks:
      - dishdash-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_HOST=${BACKEND_HOST:-0.0.0.0}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    volumes:
      - ./backend:/app
    depends_on:
      db-dev:
        condition: service_healthy
    networks:
      - dishdash-network
    command: uvicorn app.main:app --host ${BACKEND_HOST:-0.0.0.0} --port ${BACKEND_PORT:-8000} --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:8000}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dishdash-network
    command: npm run dev

volumes:
  db_dev_data:

networks:
  dishdash-network:
    driver: bridge